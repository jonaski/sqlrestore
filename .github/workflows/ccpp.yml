name: C/C++ CI
on: [push, pull_request]

jobs:

  build_source:
    name: Create source tarball
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.1
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libboost_headers-devel
            boost-devel
            file-devel
            zlib-devel
            glib2-devel
            glib2-tools
            unixODBC-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5Sql-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libQt5Sql5-unixODBC
            libqt5-linguist-devel
            libQt5Core-private-headers-devel
            libQt5Sql-private-headers-devel
            quazip-qt5-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh

      - uses: actions/upload-artifact@v2
        with:
          name: release-windows
          path: build/*.xz


  build_opensuse_lp151:
    name: Build openSUSE Leap 15.1
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.1
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libboost_headers-devel
            boost-devel
            file-devel
            zlib-devel
            glib2-devel
            glib2-tools
            unixODBC-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5Sql-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libQt5Sql5-unixODBC
            libqt5-linguist-devel
            libQt5Core-private-headers-devel
            libQt5Sql-private-headers-devel
            quazip-qt5-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp sqlrestore-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/sqlrestore.spec

      - uses: actions/upload-artifact@v2
        with:
          name: release-opensuse-lp151
          path: /usr/src/packages/RPMS/*/*.rpm


  build_opensuse_lp152:
    name: Build openSUSE Leap 15.2
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.2
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libboost_headers-devel
            boost-devel
            file-devel
            zlib-devel
            glib2-devel
            glib2-tools
            unixODBC-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5Sql-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libQt5Sql5-unixODBC
            libqt5-linguist-devel
            libQt5Core-private-headers-devel
            libQt5Sql-private-headers-devel
            quazip-qt5-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp sqlrestore-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/sqlrestore.spec

      - uses: actions/upload-artifact@v2
        with:
          name: release-opensuse-lp152
          path: /usr/src/packages/RPMS/*/*.rpm


  build_opensuse_tumbleweed:
    name: Build openSUSE Tumbleweed
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Upgrade packages
        run: zypper --non-interactive --gpg-auto-import-keys dup
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libboost_headers-devel
            boost-devel
            file-devel
            zlib-devel
            glib2-devel
            glib2-tools
            unixODBC-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5Sql-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libQt5Sql5-unixODBC
            libqt5-linguist-devel
            libQt5Core-private-headers-devel
            libQt5Sql-private-headers-devel
            quazip-qt5-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp sqlrestore-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/sqlrestore.spec


  build_fedora_32:
    name: Build Fedora 32
    runs-on: ubuntu-latest
    container:
      image: fedora:32
    env:
      RPM_BUILD_NCPUS: "2"
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Update packages
        run: yum update --assumeyes

      - name: Upgrade packages
        run: yum upgrade --assumeyes

      - name: Install Fedora dependencies
        run: >
            dnf install --assumeyes
            @development-tools
            redhat-lsb-core
            git
            glibc
            gcc-c++
            rpmdevtools
            make
            cmake
            pkgconfig
            man
            tar
            gettext
            openssh
            boost-devel
            file-devel
            glib2-devel
            unixODBC-devel
            qt5-qtbase-devel
            qt5-qtx11extras-devel
            qt5-qttools-devel
            qt5-qtbase-private-devel
            quazip-qt5-devel
            desktop-file-utils
            libappstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        working-directory: build
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp sqlrestore-*.tar.xz ~/rpmbuild/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/sqlrestore.spec

      - uses: actions/upload-artifact@v2
        with:
          name: release-fedora-32
          path: ~/rpmbuild/RPMS/*/*.rpm


  build_fedora_33:
    name: Build Fedora 33
    runs-on: ubuntu-latest
    container:
      image: fedora:33
    env:
      RPM_BUILD_NCPUS: "2"
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Update packages
        run: yum update --assumeyes

      - name: Upgrade packages
        run: yum upgrade --assumeyes

      - name: Install Fedora dependencies
        run: >
            dnf install --assumeyes
            @development-tools
            redhat-lsb-core
            git
            glibc
            gcc-c++
            rpmdevtools
            make
            cmake
            pkgconfig
            man
            tar
            gettext
            openssh
            boost-devel
            file-devel
            glib2-devel
            unixODBC-devel
            qt5-qtbase-devel
            qt5-qtx11extras-devel
            qt5-qttools-devel
            qt5-qtbase-private-devel
            quazip-qt5-devel
            desktop-file-utils
            libappstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        working-directory: build
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp sqlrestore-*.tar.xz ~/rpmbuild/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/sqlrestore.spec

      - uses: actions/upload-artifact@v2
        with:
          name: release-fedora-33
          path: ~/rpmbuild/RPMS/*/*.rpm


  build_mageia_7:
    name: Build Mageia 7
    runs-on: ubuntu-latest
    container:
      image: mageia:7
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Add extra media
        run: urpmi.addmedia --distrib http://www.mirrorservice.org/sites/mageia.org/pub/mageia/distrib/7/x86_64

      - name: Update packages
        run: urpmi.update -a

      - name: Configure auto update
        run: urpmi --auto-update

      - name: Install Mageia dependencies
        run: >
            urpmi --force
            urpmi-debuginfo-install
            git
            tar
            rpmdevtools
            make
            cmake
            glibc
            binutils
            gcc-c++
            man
            gettext
            notification-daemon
            lib64boost-devel
            file-devel
            libunixODBC-devel
            lib64qt5core-devel
            lib64qt5gui-devel
            lib64qt5widgets-devel
            lib64qt5network-devel
            lib64qt5concurrent-devel
            lib64qt5sql-devel
            lib64qt5help-devel
            libqt5test-devel
            lib64quazip-devel
            desktop-file-utils
            appstream-util
            libappstream-glib8
            hicolor-icon-theme
            qt5ct
            lib64mesaegl1
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        working-directory: build
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp sqlrestore-*.tar.xz ~/rpmbuild/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/sqlrestore.spec

      - uses: actions/upload-artifact@v2
        with:
          name: release-mageia-7
          path: ~/rpmbuild/RPMS/*/*.rpm


  build_debian_buster:
    name: Build Debian Buster
    runs-on: ubuntu-latest
    container:
      image: debian:buster
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Debian dependencies
        run: >
            apt-get update && apt-get install -y
            build-essential
            ssh
            git
            make
            cmake
            gcc
            pkg-config
            fakeroot
            gettext
            dh-make
            lsb-release
            libglib2.0-dev
            dpkg-dev
            libboost-dev
            libmagic-dev
            unixodbc-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
            libquazip5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb ${GITHUB_WORKSPACE}/build/

      - uses: actions/upload-artifact@v2
        with:
          name: release-debian-buster
          path: build/*.deb


  build_debian_bullseye:
    name: Build Debian Bullseye
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Debian dependencies
        run: >
            apt-get update && apt-get install -y
            build-essential
            ssh
            git
            make
            cmake
            gcc
            pkg-config
            fakeroot
            gettext
            dh-make
            lsb-release
            libglib2.0-dev
            dpkg-dev
            libboost-dev
            libmagic-dev
            unixodbc-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
            libquazip5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb ${GITHUB_WORKSPACE}/build/

      - uses: actions/upload-artifact@v2
        with:
          name: release-debian-bullseye
          path: build/*.deb


  build_ubuntu_bionic:
    name: Build Ubuntu Bionic
    runs-on: ubuntu-latest
    container:
      image: ubuntu:bionic
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            fakeroot
            wget
            curl
            gettext
            dh-make
            lsb-release
            dpkg-dev
            libglib2.0-dev
            libboost-dev
            libmagic-dev
            unixodbc-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
            libquazip5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb ${GITHUB_WORKSPACE}/build/

      - uses: actions/upload-artifact@v2
        with:
          name: release-ubuntu-bionic
          path: build/*.deb


  build_ubuntu_eoan:
    name: Build Ubuntu Eoan
    runs-on: ubuntu-latest
    container:
      image: ubuntu:eoan
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            fakeroot
            wget
            curl
            gettext
            dh-make
            lsb-release
            dpkg-dev
            libglib2.0-dev
            libboost-dev
            libmagic-dev
            unixodbc-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
            libquazip5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb ${GITHUB_WORKSPACE}/build/

      - uses: actions/upload-artifact@v2
        with:
          name: release-ubuntu-eoan
          path: build/*.deb


  build_ubuntu_focal:
    name: Build Ubuntu Focal
    runs-on: ubuntu-latest
    container:
      image: ubuntu:focal
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            fakeroot
            wget
            curl
            gettext
            dh-make
            lsb-release
            dpkg-dev
            libglib2.0-dev
            libboost-dev
            libmagic-dev
            unixodbc-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
            libquazip5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb ${GITHUB_WORKSPACE}/build/

      - uses: actions/upload-artifact@v2
        with:
          name: release-ubuntu-focal
          path: build/*.deb


  build_ubuntu_groovy:
    name: Build Ubuntu Groovy
    runs-on: ubuntu-latest
    container:
      image: ubuntu:groovy
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            fakeroot
            wget
            curl
            gettext
            dh-make
            lsb-release
            dpkg-dev
            libglib2.0-dev
            libboost-dev
            libmagic-dev
            unixodbc-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
            libquazip5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb ${GITHUB_WORKSPACE}/build/

      - uses: actions/upload-artifact@v2
        with:
          name: release-ubuntu-groovy
          path: build/*.deb


  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Unlink python
        run: brew unlink python@2
      - name: Install packages
        run: >
          brew install
          pkgconfig
          boost
          libmagic
          glib
          qt
          quazip
          create-dmg
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        env:
          PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
          Qt5_DIR: /usr/local/opt/qt5/lib/cmake
          Qt5LinguistTools_DIR: /usr/local/opt/qt5/lib/cmake/Qt5LinguistTools
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_BUNDLE=ON
      - name: Build
        working-directory: build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE
      - name: Install
        working-directory: build
        shell: bash
        run: make install
      #- name: Create DMG
      #  working-directory: build
      #  shell: bash
      #  run: make dmg


  build-windows:
    name: Build Windows
    runs-on: ubuntu-latest
    container:
      image: jonaski/mxe-qt
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build

      - name: Link MXE directory
        shell: bash
        run: ln -s /usr/src/mxe-qt ~/mxe-static

      - name: Run CMake
        shell: bash
        env:
          PKG_CONFIG_PATH: /usr/src/mxe-qt/usr/x86_64-w64-mingw32.static/lib/pkgconfig
        working-directory: build
        run: >
          cmake ..
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-mingw32-static.cmake
          -DENABLE_WIN32_CONSOLE=OFF
          -DQUAZIP_LIBRARIES=/usr/src/mxe-qt/usr/x86_64-w64-mingw32.static/lib/libQt5Quazip.a
          -DQUAZIP_INCLUDE_DIRS=/usr/src/mxe-qt/usr/x86_64-w64-mingw32.static/include/Qt5Quazip

      - name: Run Make
        working-directory: build
        run: make -j2

      - name: Strip executables
        working-directory: build
        run: /usr/src/mxe-qt/usr/bin/x86_64-w64-mingw32.static-strip *.exe

      - uses: actions/upload-artifact@v2
        with:
          name: release-windows
          path: build/*.exe


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'
    needs:
      - build_source
      - build_opensuse_lp151
      - build_opensuse_lp152
      - build_fedora_32
      - build_fedora_33
      - build_mageia_7
      - build_debian_buster
      - build_debian_bullseye
      - build_ubuntu_bionic
      - build_ubuntu_eoan
      - build_ubuntu_focal
      - build_ubuntu_groovy
      - build-windows
      - build-macos
    steps:
      - uses: actions/checkout@v1.2.0
      - uses: actions/download-artifact@v2
        with:
          path: release_artifacts
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          version=$(git describe --tags --always)
          assets=()
          for asset in $(find release_artifacts -type f); do
            echo "Adding asset: ${asset}"
            assets+=("-a" "$asset")
          done
          hub release create "${assets[@]}" -m "SQL Restore $version" -t "$GITHUB_SHA" "$version"
